package ranchhand

import (
	"context"
	"encoding/base64"
	"os"
	"os/exec"
	"text/template"
	"time"

	"github.com/pkg/errors"
)

const (
	RKEKubeConfig = "kube_config_rancher-cluster.yml"

	RKEConfigFile = "rancher-cluster.yml"

	RKETemplate = `# DO NOT EDIT THIS FILE - GENERATED BY RANCHHAND
ssh_key_path: {{ .SSH.KeyPath }}
ignore_docker_version: false

nodes:
{{- range .Nodes }}
  - address: {{ .PublicIP }}
  {{- with .PrivateIP }}
    internal_address: {{ . }}
  {{- end }}
    user: {{ $.SSH.User }}
    port: {{ $.SSH.Port }}
    role: [controlplane,worker,etcd]
{{- end }}

services:
  etcd:
    snapshot: true
    creation: 6h
    retention: 24h

ingress:
  provider: nginx
  extra_args:
    default-ssl-certificate: ingress-nginx/ingress-default-cert

addons: |-
  ---
  apiVersion: v1
  kind: Secret
  metadata:
    name: ingress-default-cert
    namespace: ingress-nginx
  type: kubernetes.io/tls
  data:
    tls.crt: {{ .CertPEM | base64Encode }}
    tls.key: {{ .KeyPEM | base64Encode }}
`
)

var tpl *template.Template

type tmplData struct {
	*Config
	CertPEM, KeyPEM []byte
}

func launchRKE(cfg *Config, certPEM, keyPEM []byte) error {
	// exit early if cluster is already running
	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel()
	if err := exec.CommandContext(ctx, "rke", "version", "--config", RKEConfigFile).Run(); err == nil {
		return nil
	}

	// generate rke config
	file, err := os.Create(RKEConfigFile)
	if err != nil {
		return errors.Wrapf(err, "cannot create %s", RKEConfigFile)
	}
	defer file.Close()

	// render file contents
	data := tmplData{Config: cfg, CertPEM: certPEM, KeyPEM: keyPEM}
	if err := tpl.Execute(file, data); err != nil {
		return errors.Wrap(err, "rke template render failed")
	}

	// execute rke up
	cmd := exec.Command("rke", "up", "--config", RKEConfigFile)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		return errors.Wrap(err, "cannot install kubernetes")
	}

	return nil
}

func init() {
	tpl = template.New("rke-tmpl")
	tpl.Funcs(template.FuncMap{
		"base64Encode": func(bs []byte) string {
			return base64.StdEncoding.EncodeToString(bs)
		},
	})
	template.Must(tpl.Parse(RKETemplate))
}
