---
# K8s Installation
- name: Create K8s Configuration Directory
  become: true
  file: path=/etc/kubernetes state=directory

- name: Copy k8s Configurations
  become: true
  copy: src="{{ item }}" dest="/etc/kubernetes/{{ item }}" mode=600 owner=root
  with_items:
    - admission.yaml
    - audit.yaml
    - event.yaml

- name: Create Self Signed OpenSSL Certificate Directory
  become: true
  file: path="{{ item }}" state=directory
  with_items:
    - /etc/ssl/crt
    - /etc/ssl/private
    - /etc/ssl/csr

- name: Install Crypto Pkgs
  become: true
  apt:
    name:
      - python3-pip
      - libssl-dev

- name: Install Python Crypto Module
  become: true
  pip: name=pyOpenSSL

- name: Generate an OpenSSL Private Key (one host only)
  become: true
  openssl_privatekey:
    path: /etc/ssl/private/dominodatalab.com.pem
  run_once: true

- name: Generate an OpenSSL Certificate Signing Request (one host only)
  become: true
  openssl_csr:
    path: /etc/ssl/csr/dominodatalab.com.csr
    privatekey_path: /etc/ssl/private/dominodatalab.com.pem
    common_name: www.ansible.com
  run_once: true

- name: Generate a Self Signed OpenSSL Certificate (one host only)
  become: true
  openssl_certificate:
    path: /etc/ssl/crt/dominodatalab.com.crt
    privatekey_path: /etc/ssl/private/dominodatalab.com.pem
    csr_path: /etc/ssl/csr/dominodatalab.com.csr
    provider: selfsigned
  run_once: true

- name: Download Generated Self Signed OpenSSL Certificate (one host only)
  become: true
  fetch:
    src: "{{ item.remote }}"
    dest: "{{ item.local }}"
    flat: yes
  with_items:
    - {remote: /etc/ssl/crt/dominodatalab.com.crt, local: /tmp/dominodatalab.com.crt}
    - {remote: /etc/ssl/private/dominodatalab.com.pem, local: /tmp/dominodatalab.com.pem}
  run_once: true

- name: Copy Self Signed OpenSSL Certificate
  become: true
  copy: src="{{ item.local }}" dest="{{ item.remote }}"
  with_items:
    - {remote: /etc/ssl/crt/dominodatalab.com.crt, local: /tmp/dominodatalab.com.crt}
    - {remote: /etc/ssl/private/dominodatalab.com.pem, local: /tmp/dominodatalab.com.pem}

- name: Copy RKE Template
  template:
    src: rancher-cluster.yml
    dest: rancher-cluster.yml
  register: rke_config

- name: Save K8s State (on upgrade only)
  command: "rke etcd snapshot-save --name snapshot-{{ ansible_date_time.iso8601_basic }} --config ./rancher-cluster.yml"
  when: false # TODO: create proper coniditional

- name: Generate Rancher SSH Keypair
  openssh_keypair:
    path: /home/{{ ansible_user_id }}/.ssh/rancher
  run_once: true

- name: Download Rancher SSH Keypair
  fetch:
      src: "{{ item.remote }}"
      dest: "{{ item.local }}"
      flat: yes
  with_items:
    - {remote: "/home/{{ ansible_user_id }}/.ssh/rancher", local: /tmp/rancher}
    - {remote: "/home/{{ ansible_user_id }}/.ssh/rancher.pub", local: /tmp/rancher.pub}
  run_once: yes

- name: Distribute SSH Keypair
  copy:
    src: "{{ item.local }}"
    dest: "{{ item.remote }}"
  with_items:
    - {remote: "/home/{{ ansible_user_id }}/.ssh/rancher", local: /tmp/rancher}
    - {remote: "/home/{{ ansible_user_id }}/.ssh/rancher.pub", local: /tmp/rancher.pub}

- name: Set Rancher Authorized Key
  authorized_key:
    user: "{{ ansible_user_id }}"
    state: present
    key: "{{ lookup('file', '/tmp/rancher.pub') }}"

- name: Run RKE/K8s Install/Upgrade (one host only)
  command: "rke up --config ./rancher-cluster.yml"
  run_once: true
  when: rke_config is changed


